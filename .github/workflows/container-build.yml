name: Build and Publish Container

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a temporary JSON file to store semantic-release output
          echo '{"branches":["main"],"plugins":[["@semantic-release/npm",{"npmPublish":false}],"@semantic-release/github"]}' > .releaserc.dryrun.json
          
          # Run semantic-release with --dry-run and output to JSON file
          npx semantic-release --dry-run --no-ci --extends .releaserc.dryrun.json > semantic-release-output.json || true
          
          # Check if a new release would be created
          if grep -q '"type":"minor"|"type":"major"|"type":"patch"' semantic-release-output.json; then
            # Extract version using jq if available, otherwise fallback to grep
            if command -v jq &> /dev/null; then
              VERSION=$(cat semantic-release-output.json | jq -r 'select(.nextRelease != null) | .nextRelease.version' 2>/dev/null || echo "")
            else
              VERSION=$(grep -o '"version":"[0-9]\+\.[0-9]\+\.[0-9]\+"' semantic-release-output.json | head -1 | cut -d '"' -f 4)
            fi
            
            if [ -n "$VERSION" ]; then
              echo "new_release_published=true" >> $GITHUB_OUTPUT
              echo "new_release_version=$VERSION" >> $GITHUB_OUTPUT
              # Run the actual release with the proper config
              npx semantic-release
            else
              echo "new_release_published=false" >> $GITHUB_OUTPUT
              echo "Could not determine version" >> $GITHUB_OUTPUT
            fi
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "No new version to be released" >> $GITHUB_OUTPUT
          fi
          
          # Clean up temporary files
          rm -f semantic-release-output.json .releaserc.dryrun.json
        
  build-and-push:
    needs: semantic-release
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.ref }}
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.semantic-release.outputs.new_release_version }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
